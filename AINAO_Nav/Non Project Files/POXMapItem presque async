
//
//  POXMapItemInfoView.swift
//  AINAO Nav
//
//  Created by FrancoisW on 26/06/2024.
//

import Foundation
import SwiftUI
import MapKit

struct POXMapItemInfoView: View {
    @State private var lookAroundScene: MKLookAroundScene?
    
    @State private var name = ""
    @State private var description = ""
    
    var selectedResult : MKMapItem
    var route: MKRoute?
    @Binding var userCreatedMapItem: UnifiedMapItem? // This map item is
    @Binding var doDisplayPOXMapItemInfoView : Bool
    @Binding var userProfile : UserProfile
    
    
    // Formatter to display travel time in a readable format
    private var travelTime: String? {
        let _ = print("Entering Travel Time Constructor is route found ?")
        guard let route else { return nil }
        let _ = print("Route found : expected travel time is \(route.expectedTravelTime)")
        
        let formatter = DateComponentsFormatter()
        formatter.unitsStyle = .abbreviated
        formatter.allowedUnits = [.hour, .minute]
        return formatter.string(from: route.expectedTravelTime)
    }
    
    
    // Function to fetch Look Around scene for the selected map item
    func getLookAroundScene() {
        lookAroundScene = nil
        Task {
            do {
                let request = MKLookAroundSceneRequest(mapItem: selectedResult)
                lookAroundScene = try await request.scene
            } catch {
                print("Error fetching Look Around scene: \(error)")
            }
        }
    }
    var isChanged: Bool {
        return (name != selectedResult.name || description != selectedResult.description)
    }
    var body: some View {
        
        ZStack {
            Color(Theme.frame)
            VStack {
                HStack {
                    VStack(alignment: .leading) {
                        var isPOT : Bool = true
                        var potType : POTType = .crowded_area
                        var poiType : POIType = .bench
                        
                        TextField("Nom", text: $name)
                            .font(.title)
                        TextField("Description", text: $description, axis: .vertical)
                        if isChanged {
                                Button("Mettre Ã  jour") {
                                    
                                    userCreatedMapItem = UnifiedMapItem(mapItem: selectedResult)     // This is created to get the position, then user will need to define what he wants to do with it
                                    
                                    userCreatedMapItem!.name = name
                                        .trimmingCharacters(in: .whitespacesAndNewlines)
                                    userCreatedMapItem!.description = description
                                        .trimmingCharacters(in: .whitespacesAndNewlines)
                                    
                                    let _ = print("Unified MarkItem Updated !")
                                    
                                    let placemark = Placemark(placemark: userCreatedMapItem!.placemark,newName: name)
                                    
                                    if (isPOT) {
                                        let pot = POT(type: potType, sourceRef: userProfile.id, sourceType: .currentUser, placemark: placemark)
                                        await userProfile.addPOT(with: pot)
                                    } else {
                                        let poi = POI(type: poiType, sourceRef: userProfile.id, sourceType: .currentUser, placemark: placemark)
                                        await userProfile.addPOI(with: poi)
                                    }
                                }
                                .frame(maxWidth: .infinity, alignment: .trailing)
                                .buttonStyle(.borderedProminent)
                                
                        }
                    }
                    .textFieldStyle(.roundedBorder)
                    .autocorrectionDisabled()
                    Spacer()
                    Button {
                        doDisplayPOXMapItemInfoView = false
                    } label: {
                        Image(systemName: "xmark.circle.fill")
                            .imageScale(.large)
                            .foregroundStyle(.gray)
                    }
                }
                
                if let lookAroundScene {
                    LookAroundPreview(initialScene: lookAroundScene)
                        .overlay(alignment: .bottomTrailing) {
                            HStack {
                                Text("\(selectedResult.name ?? "")")
                                if let travelTime {
                                    Text(travelTime)
                                        .foregroundStyle(.red)
                                } else {
                                    let _ = print("Sorry, no travel time")
                                }
                            }
                            .font(.caption)
                            .foregroundStyle(Theme.frame)
                            .padding(10)
                        }
                        .onAppear {
                            let _ = print("selectedResult changed ! I'm getting the look around scene (onAppear)")
                            
                            getLookAroundScene()
                        }
                        .onChange(of: selectedResult) { _ in
                            let _ = print("selectedResult changed ! I'm getting the look around scene (onChange)")
                            
                            getLookAroundScene()
                        }
                } else {
                    ContentUnavailableView("No preview available", systemImage: "eye.slash")
                }
            } // FIN HSTACK 2
            .padding()
            .task(id: selectedResult) {
                await getLookAroundScene()
            }
        }
        
    } // FIN VSTACK PRINCIPALE
    
    
}


struct POXMapItemInfoView_Previews: PreviewProvider {
    static var previews: some View {
        // Provide a mock MKMapItem and other necessary data to preview the view
        ZStack {
            Color(Theme.color60)
                .ignoresSafeArea()
            POXMapItemInfoView(selectedResult: MKMapItem(placemark: MKPlacemark(coordinate: CLLocationCoordinate2D(latitude: 43.6045, longitude: 1.4440))), route: nil, userCreatedMapItem: .constant(nil),doDisplayPOXMapItemInfoView: .constant(true),userProfile: .constant(UserProfile()))
            
        }
    }
}
